import streamlit as st
import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import sys
import datetime

# Configura√ß√µes da p√°gina com tema aprimorado
st.set_page_config(
    page_title="üç¶ Gelato M√°gico - Previs√£o de Vendas",
    page_icon="üç¶",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/gisengsoft/MLVendasLab',
        'About': 'Sistema de previs√£o de vendas baseado em Machine Learning'
    }
)

# CSS personalizado para melhorar a apar√™ncia
st.markdown("""
<style>
    /* Estilo geral */
    .main {
        background-color: #F5F7F9;
    }
    /* Bot√µes mais atrativos */
    .stButton>button {
        width: 100%;
        font-weight: bold;
    }
    /* Cards para m√©tricas */
    div[data-testid="stMetric"] {
        background-color: white;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    }
    /* Cores para t√≠tulos */
    h1 {
        color: #1E3A8A;
    }
    h3 {
        color: #2563EB;
    }
    /* Tabelas mais bonitas */
    div[data-testid="stTable"] {
        border-radius: 5px;
        overflow: hidden;
    }
    /* Container estilizado */
    .css-12w0qpk {
        background-color: white;
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    }
    /* Status do modelo */
    .status-box {
        padding: 10px;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
    }
    .status-ok {
        background-color: #d1fae5;
        color: #059669;
    }
    .status-error {
        background-color: #fee2e2;
        color: #dc2626;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar estado da sess√£o para hist√≥rico
if 'historico' not in st.session_state:
    st.session_state.historico = []

# Definir caminho absoluto para o modelo
MODELO_PATH = r"C:\MLVendasLab\outputs\modelo_final.joblib"

# Fun√ß√£o para criar um term√¥metro visual
def criar_termometro(temperatura, min_temp=20, max_temp=37):
    pct = (temperatura - min_temp) / (max_temp - min_temp) * 100
    cor = '#5DA5DA' if temperatura < 25 else '#FAA43A' if temperatura < 32 else '#F15854'
    
    html = f"""
    <div style="margin:10px 0;">
        <div style="margin-bottom:5px;"><b>Term√¥metro</b></div>
        <div style="width:100%; background-color:#ddd; border-radius:5px;">
            <div style="width:{pct}%; height:24px; background-color:{cor}; 
                border-radius:5px; text-align:center; line-height:24px; color:white; font-weight:bold;">
                {temperatura}¬∞C
            </div>
        </div>
        <div style="display:flex; justify-content:space-between; font-size:12px; margin-top:3px;">
            <span>Frio (20¬∞C)</span>
            <span>Moderado</span>
            <span>Quente (37¬∞C)</span>
        </div>
    </div>
    """
    return st.markdown(html, unsafe_allow_html=True)

# Fun√ß√£o para converter DataFrame para CSV (para download)
@st.cache_data
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Carregar o modelo
@st.cache_resource
def carregar_modelo():
    try:
        if os.path.exists(MODELO_PATH):
            modelo = joblib.load(MODELO_PATH)
            return modelo
        else:
            st.error(f"Arquivo n√£o encontrado: {MODELO_PATH}")
            return None
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {e}")
        return None

# Tentar carregar o modelo
try:
    modelo = carregar_modelo()
    modelo_carregado = modelo is not None
except Exception as e:
    st.error(f"Falha ao carregar o modelo: {e}")
    modelo_carregado = False

# T√≠tulo e descri√ß√£o
st.title('üç¶ Previs√£o de Vendas - Gelato M√°gico')
st.markdown("### Sistema de previs√£o baseado em temperatura")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.image("https://img.icons8.com/color/96/000000/ice-cream-cone.png")
    
    st.markdown("### Sobre")
    st.info("""
    Este sistema utiliza Machine Learning para prever vendas de sorvete com base na temperatura.
    
    Desenvolvido por: Gelato M√°gico
    """)
    
    # Informa√ß√£o sobre o modelo
    st.markdown("### Informa√ß√µes do Modelo")
    if modelo_carregado:
        st.markdown('<div class="status-box status-ok">‚úÖ Modelo carregado</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="status-box status-error">‚ùå Modelo n√£o dispon√≠vel</div>', unsafe_allow_html=True)
        st.info(f"Procurando em: {MODELO_PATH}")
    
    # Data e hora atual
    now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
    st.markdown(f"**√öltima atualiza√ß√£o:** {now}")

# Layout principal com duas colunas
col1, col2 = st.columns([1, 2])

# Coluna 1 - √Årea de previs√£o
with col1:
    with st.container():
        st.markdown("### Fa√ßa uma previs√£o")
        
        # Controle de temperatura com term√¥metro visual
        temperatura = st.slider(
            'Selecione a temperatura (¬∞C):', 
            min_value=20.0, 
            max_value=37.0, 
            value=27.0, 
            step=0.5
        )
        
        # Mostrar term√¥metro visual
        criar_termometro(temperatura)
        
        # Bot√£o de previs√£o
        prever_clicked = st.button('Fazer Previs√£o', type="primary")
        
        # Processar a previs√£o quando o bot√£o for clicado
        if prever_clicked and modelo_carregado:
            try:
                previsao = int(modelo.predict([[temperatura]])[0])
                
                # Adicionar ao hist√≥rico
                st.session_state.historico.append({
                    'temperatura': temperatura,
                    'previsao': previsao,
                    'timestamp': datetime.datetime.now().strftime("%H:%M:%S")
                })
                
                # Mostrar cards com m√©tricas
                st.success(f'Previs√£o calculada com sucesso!')
                
                col_a, col_b = st.columns(2)
                with col_a:
                    st.metric("Temperatura", f"{temperatura}¬∞C")
                with col_b:
                    st.metric("Vendas Previstas", f"{previsao}")
                
                # Recomenda√ß√µes baseadas na previs√£o
                st.subheader("Recomenda√ß√£o:")
                if previsao > 150:
                    st.info("üìà **Alta demanda esperada!** Aumente o estoque e a equipe.")
                elif previsao > 100:
                    st.info("üîÑ **Demanda normal.** Mantenha estoque e equipe regulares.")
                else:
                    st.info("üìâ **Baixa demanda esperada.** Considere promo√ß√µes para atrair clientes.")
                
            except Exception as e:
                st.error(f"Erro ao fazer previs√£o: {e}")
        elif prever_clicked:
            st.error("Modelo n√£o carregado. N√£o √© poss√≠vel fazer previs√µes.")

# Coluna 2 - Gr√°fico e visualiza√ß√£o
with col2:
    st.markdown("### Rela√ß√£o Temperatura x Vendas")
    
    if modelo_carregado:
        try:
            # Gerar dados para o gr√°fico
            temperaturas = np.arange(20, 38, 0.5).reshape(-1, 1)
            previsoes = modelo.predict(temperaturas)
            
            # Criar figura
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # Sombreamento para faixas de temperatura
            ax.axvspan(20, 25, alpha=0.1, color='blue', label='Frio')
            ax.axvspan(25, 32, alpha=0.1, color='orange', label='Moderado')
            ax.axvspan(32, 38, alpha=0.1, color='red', label='Quente')
            
            # Linha de previs√£o
            ax.plot(temperaturas, previsoes, 'r-', linewidth=2.5, label='Modelo de previs√£o')
            
            # Marcar previs√£o atual
            if prever_clicked and 'previsao' in locals():
                ax.scatter([temperatura], [previsao], color='blue', s=120, zorder=5, label='Previs√£o atual')
                
            # Estilizar o gr√°fico
            ax.set_title('Rela√ß√£o entre Temperatura e Vendas Previstas', fontsize=14)
            ax.set_xlabel('Temperatura (¬∞C)', fontsize=12)
            ax.set_ylabel('Vendas Previstas (unidades)', fontsize=12)
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.legend()
            
            # Adicionar anota√ß√µes para faixas
            ax.text(22.5, np.max(previsoes)*0.9, "Frio", fontsize=9, 
                   ha='center', va='center', alpha=0.7, color='blue')
            ax.text(28.5, np.max(previsoes)*0.9, "Moderado", fontsize=9,
                   ha='center', va='center', alpha=0.7, color='darkorange')
            ax.text(35, np.max(previsoes)*0.9, "Quente", fontsize=9, 
                   ha='center', va='center', alpha=0.7, color='red')
            
            # Exibir o gr√°fico no Streamlit
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"Erro ao gerar gr√°fico: {e}")
    else:
        st.warning("Gr√°fico n√£o dispon√≠vel: modelo n√£o carregado.")

# Tabela de previs√µes e hist√≥rico
st.markdown("---")
col_tab1, col_tab2 = st.columns(2)

# Tabela de refer√™ncia
with col_tab1:
    if modelo_carregado:
        try:
            st.markdown("### Tabela de Refer√™ncia")
            temperaturas_ref = list(range(20, 38, 2))
            previsoes_ref = [int(modelo.predict([[t]])[0]) for t in temperaturas_ref]

            df_ref = pd.DataFrame({
                "Temperatura (¬∞C)": temperaturas_ref,
                "Previs√£o de Vendas": previsoes_ref
            })

            # Tabela interativa
            st.dataframe(df_ref, use_container_width=True)
            
            # Bot√£o para download
            csv = convert_df(df_ref)
            st.download_button(
                "üì• Baixar Tabela CSV",
                csv,
                "previsao_vendas_sorvete.csv",
                "text/csv",
                key='download-csv'
            )
        except Exception as e:
            st.error(f"Erro ao gerar tabela de refer√™ncia: {e}")
    else:
        st.warning("Tabela de refer√™ncia n√£o dispon√≠vel: modelo n√£o carregado.")

# Hist√≥rico de previs√µes
with col_tab2:
    st.markdown("### Hist√≥rico de Previs√µes")
    if st.session_state.historico:
        hist_df = pd.DataFrame(st.session_state.historico)
        st.dataframe(hist_df.style.format({"temperatura": "{:.1f}¬∞C"}), use_container_width=True)
        
        if st.button("Limpar Hist√≥rico"):
            st.session_state.historico = []
            st.experimental_rerun()
    else:
        st.info("Nenhuma previs√£o realizada nesta sess√£o.")

# Instru√ß√µes de uso
with st.expander("Como usar este dashboard", expanded=False):
    st.markdown("""
    ### Instru√ß√µes de Uso:
    
    1. **Selecione a temperatura** usando o controle deslizante
    2. Clique no bot√£o **Fazer Previs√£o** para calcular a previs√£o de vendas
    3. Veja o resultado e as recomenda√ß√µes baseadas na previs√£o
    4. Consulte o gr√°fico para entender a rela√ß√£o entre temperatura e vendas
    5. Use a tabela de refer√™ncia para valores comuns
    6. Visualize seu hist√≥rico de previs√µes nesta sess√£o
    
    Para melhores resultados, use temperaturas entre 20¬∞C e 37¬∞C.
    """)

# Informa√ß√µes de debug (opcional)
with st.expander("Informa√ß√µes de Debug", expanded=False):
    st.subheader("Informa√ß√µes de Debug")
    st.write(f"Caminho do modelo: {MODELO_PATH}")
    st.write(f"Arquivo existe? {'Sim' if os.path.exists(MODELO_PATH) else 'N√£o'}")
    st.write(f"Diret√≥rio atual: {os.getcwd()}")
    
    if st.checkbox("Mostrar informa√ß√µes do sistema"):
        st.write(f"Python: {sys.version}")
        st.write(f"Streamlit: {st.__version__}")
        if 'numpy' in sys.modules:
            st.write(f"NumPy: {np.__version__}")
        if 'pandas' in sys.modules:
            st.write(f"Pandas: {pd.__version__}")