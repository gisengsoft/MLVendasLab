import streamlit as st
import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="üç¶ Gelato M√°gico - Previs√£o de Vendas",
    page_icon="üç¶",
    layout="wide"
)

# Definir caminho absoluto para o modelo
MODELO_PATH = r"C:\MLVendasLab\outputs\modelo_final.joblib"

# Carregar o modelo
@st.cache_resource
def carregar_modelo():
    try:
        if os.path.exists(MODELO_PATH):
            modelo = joblib.load(MODELO_PATH)
            st.success("Modelo carregado com sucesso!")
            return modelo
        else:
            st.error(f"Arquivo n√£o encontrado: {MODELO_PATH}")
            return None
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {e}")
        return None

# Tentar carregar o modelo
try:
    modelo = carregar_modelo()
    modelo_carregado = modelo is not None
except Exception as e:
    st.error(f"Falha ao carregar o modelo: {e}")
    modelo_carregado = False

# T√≠tulo e descri√ß√£o
st.title('üç¶ Previs√£o de Vendas - Gelato M√°gico')
st.subheader('Sistema de previs√£o baseado em temperatura')

# Sidebar com informa√ß√µes
with st.sidebar:
    st.image("https://img.icons8.com/color/96/000000/ice-cream-cone.png")
    st.subheader("Sobre")
    st.info("""
    Este sistema utiliza Machine Learning para prever vendas de sorvete com base na temperatura.
    
    Desenvolvido por: Gelato M√°gico
    """)
    
    # Informa√ß√£o sobre o modelo
    st.subheader("Informa√ß√µes do Modelo")
    if modelo_carregado:
        st.success("‚úÖ Modelo carregado")
    else:
        st.error("‚ùå Modelo n√£o dispon√≠vel")
        st.info(f"Procurando em: {MODELO_PATH}")

# Layout principal
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("Fa√ßa uma previs√£o")
    temperatura = st.slider(
        'Selecione a temperatura (¬∞C):', 
        min_value=20.0, 
        max_value=37.0, 
        value=30.0, 
        step=0.5
    )
    
    if st.button('Fazer Previs√£o', type="primary"):
        if modelo_carregado:
            try:
                previsao = int(modelo.predict([[temperatura]])[0])
                
                st.success(f'Para uma temperatura de {temperatura}¬∞C, '
                          f'a previs√£o de vendas √© de **{previsao} sorvetes**.')
                
                # Mostrar recomenda√ß√µes
                if previsao > 150:
                    st.info("üìä Recomenda√ß√£o: Considere aumentar o estoque e a equipe.")
                elif previsao > 100:
                    st.info("üìä Recomenda√ß√£o: Estoque e equipe normais.")
                else:
                    st.info("üìä Recomenda√ß√£o: Considere promo√ß√µes para atrair clientes.")
            except Exception as e:
                st.error(f"Erro ao fazer previs√£o: {e}")
        else:
            st.error("Modelo n√£o carregado. N√£o √© poss√≠vel fazer previs√µes.")

with col2:
    st.subheader("Rela√ß√£o Temperatura x Vendas")
    
    if modelo_carregado:
        try:
            # Gerar dados para o gr√°fico
            temperaturas = np.arange(20, 38, 0.5).reshape(-1, 1)
            previsoes = modelo.predict(temperaturas)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(temperaturas, previsoes, 'r-', linewidth=2)
            
            if 'previsao' in locals():
                ax.scatter([temperatura], [previsao], color='blue', s=100, label='Previs√£o atual')
                
            ax.set_title('Rela√ß√£o entre Temperatura e Vendas Previstas')
            ax.set_xlabel('Temperatura (¬∞C)')
            ax.set_ylabel('Vendas Previstas (unidades)')
            ax.grid(True, alpha=0.3)
            if 'previsao' in locals():
                ax.legend()
            
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erro ao gerar gr√°fico: {e}")
    else:
        st.warning("Gr√°fico n√£o dispon√≠vel: modelo n√£o carregado.")

# Tabela de previs√µes
if modelo_carregado:
    try:
        st.subheader("Tabela de Refer√™ncia")
        temperaturas_ref = list(range(20, 38, 2))
        previsoes_ref = [int(modelo.predict([[t]])[0]) for t in temperaturas_ref]

        df_ref = pd.DataFrame({
            "Temperatura (¬∞C)": temperaturas_ref,
            "Previs√£o de Vendas": previsoes_ref
        })

        st.table(df_ref)
    except Exception as e:
        st.error(f"Erro ao gerar tabela de refer√™ncia: {e}")
else:
    st.warning("Tabela de refer√™ncia n√£o dispon√≠vel: modelo n√£o carregado.")

# Instru√ß√µes adicionais
st.markdown("---")
st.subheader("Como usar:")
st.markdown("""
1. Use o controle deslizante para selecionar a temperatura desejada
2. Clique no bot√£o "Fazer Previs√£o"
3. Veja o resultado e as recomenda√ß√µes baseadas na previs√£o
""")

# Debug info (apenas em desenvolvimento)
if st.checkbox("Mostrar informa√ß√µes de debug"):
    st.subheader("Informa√ß√µes de Debug")
    st.write(f"Caminho do modelo: {MODELO_PATH}")
    st.write(f"Arquivo existe? {'Sim' if os.path.exists(MODELO_PATH) else 'N√£o'}")
    st.write(f"Diret√≥rio atual: {os.getcwd()}")